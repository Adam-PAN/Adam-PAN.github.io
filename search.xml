<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[转存：暑期培训安排及资料]]></title>
    <url>%2F2018%2F06%2F20%2F%E8%BD%AC%E5%AD%98%EF%BC%9A%E6%9A%91%E6%9C%9F%E5%9F%B9%E8%AE%AD%E5%AE%89%E6%8E%92%E5%8F%8A%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[暑期培训 目标 完成一个简单的视频APP. 培训内容 Java语言基础知识 Android基础知识 Android布局控件 Android高级控件 Android网络请求 Android常见库使用 视频APP的制作 一项一天，总共七天完成。 课程学习 JDK环境变量配置 JAVA基础语法 Android Studio下载 安卓模拟器：Genymotion 慕课网 极客学院 Kotlin中文文档 Kotlin在线编译 推荐书籍 第二行代码 Thinking In Java 中文版 疯狂Android讲义第三版 Android群英传 Android 设计模式源码分析 Android开发艺术探索 推荐博客 翔工作室博客 张鸿洋 任玉刚 刘桂林 Android开发技术周报 胡凯 张兴业 Android Developers Blog 代码家 drakeet mobdevgroup(分享IOS、Android、Html5等) Material Design 设计 Material Design 教程 Material Design 教程(中文版) Material Design Android Library 十大Material Design开源项目 参考文档 Google Developers Material Design 开发者参考文档 Android官方培训课程中文版(v0.9.7) Android 源码在线 开源库收集 Android 开源项目汇总 Android 开源项目源码分析 泡在网上的日子 android-gems Android Libraries and Resources Android Arsenal Android 开发者杂志周刊(资料来自 Drakeet , 原链接 地址 ) 周刊名 简介 Android 开发技术周报 Android 开发技术周报由@脉脉不嘚語 维护更新, 分享的都是高质量的文章教程,工具等 Android 科学院 由 @duguguiyu和豌豆荚一小撮工程师组成, 分享的都是最新的 Android 技术 开发技术前线 开发技术前线是一个高质量技术文章的聚合网站, 主要分享 Android, iOS等内容 App 开发日报 App 开发日报主要关注移动应用的开发, 分享的内容主要来自微博上知名的开发者推荐的内容 Android 开发周报 Android 开发周报是郭亮在连载更新在 Infoq 的周刊, 它不仅分享 Android 的相关新闻, 新工具 干货集中营 由 代码家 维护更新 Android Weekly Android Weekly 是由Android 团队的成员和国外知名的 Android 开发者维护, 分享的内容不仅仅只有干货, 而且还有最新的技术分享 设计模式 Java之美[从菜鸟到高手演变]之设计模式 java-design-patterns Android源码设计模式分析项目 书籍:Android源码设计模式 第2版 其他 翔工作室首页 矿大导航 矿大浏览器APP Git教程 国内可用API]]></content>
      <categories>
        <category>工作总结</category>
      </categories>
      <tags>
        <tag>App</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06/11 - 06/15 五日热点整理]]></title>
    <url>%2F2018%2F06%2F16%2F06-11-06-15-%E4%BA%94%E6%97%A5%E7%83%AD%E7%82%B9%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[5G标准出台 &ensp; 5G商用进入全面冲刺阶段，中国能在5G时代夺得多少话语权，还要拭目以待。按照工信部部署，我国将于2020年实现5G商用。 A站数据遭泄露 &ensp; A站主动承认数据库遭到泄露，被公众认为其责任态度十分诚恳，两日后黑客主动宣布决定无条件删除数据库，理由是A站客服态度诚恳。 &ensp; 个人对事件背后的真实性表示怀疑，认为是快手收购A站后回收老用户的一个举措。先制造热点吸引眼光，随后敦促用户来修改密码，并表明公司诚信可靠得态度，再以大团圆的结局迅速了结。虽然公关俗套又幼稚，但真的很值得学习！ 今日头条上线游戏板块 &ensp; 今日头条低调上线“今日游戏”功能，进军游戏板块，与腾讯市场正面争夺。今日游戏里的推荐，以网易系居多。 &ensp; 万万没想到，你不搞音乐不搞社交先搞起游戏了。非常不看好。。。 Steam将推出中国版 &ensp; 经营Steam平台的美国游戏公司Valve与中国合作伙伴完美世界宣布，将在未来推出本土化服务“Steam中国”，并宣称Steam中国并不影响Steam现有国际业务。 &ensp; 然而从正常的业务逻辑角度，Steam中国一旦推出，Steam国际是一定会被墙掉的。]]></content>
      <categories>
        <category>五日热点整理</category>
      </categories>
      <tags>
        <tag>五日热点整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[华谊兄弟：风里雨里，大洋彼岸贾老板等你]]></title>
    <url>%2F2018%2F06%2F15%2F%E5%8D%8E%E8%B0%8A%E5%85%84%E5%BC%9F%EF%BC%9A%E9%A3%8E%E9%87%8C%E9%9B%A8%E9%87%8C%EF%BC%8C%E5%A4%A7%E6%B4%8B%E5%BD%BC%E5%B2%B8%E8%B4%BE%E8%80%81%E6%9D%BF%E7%AD%89%E4%BD%A0%2F</url>
    <content type="text"><![CDATA[&ensp; &ensp;6月6日，华谊兄弟发布《关于股东部分股份质押及解押公告》，宣布华谊兄弟持股人王中军、王中磊的股份质押状况。截止公告发出时间，华谊第一大股东及公司法人，王中军向中信建投证券质押占总股本19.86%的股份，手中仅剩2.21%；王中磊质押总股本6.19%，余1.04%。 &ensp; &ensp;华谊兄弟再陷股权质押风波。 &ensp; &ensp;山雨欲来风满楼，尽管华谊兄弟及王中军本人一再声明不存在抛售公司股份套现的行为，外界依然猜测不断，华谊兄弟股价持续下跌；截至本文发出的6月15日，华谊兄弟收盘价为6.46元，创下5年来最低。 &ensp; &ensp;史无前例的压力落在了华谊兄弟头上，资本市场将华谊推上了风头浪尖。 &ensp; &ensp;一切都始于5月28日的夜晚，崔永元怼天怼地终于怼到了老仇人华谊头上。大小合同，4天6000万片酬，含沙射影剑指范冰冰与《手机2》。也许崔永元自己都没想到，蝴蝶效应就此爆发，可谓“崔枯拉朽”。 &ensp; &ensp;6月3日，无锡地税局宣布介入调查，国家税务总局责成江苏等地税务机关调查合适有关影视从业人员阴阳合同的涉税问题。 &ensp; &ensp;影视圈的阴阳合同其实早就成为圈内默认的普遍现象，地方税务睁一只眼闭一只眼；影视老板们也做好两手准备，小合同备案明里给钱，大合同私下转账。影视行业项目周期短，资金流量大，人员离散率高，带动相关产业面广，查处可能性小，自然而然便给洗钱创造了无限的空间。 &ensp; &ensp;拍摄一部电影成本只要1000万，再花4000万片酬请来当红女星小鲜肉，搭好关系签好合同，戏子们捧起了自己的高身价接着有戏拍，老板们轻松洗了几千万的钱，继续当圈里的大老板。 &ensp; &ensp;巨资请来国外某某特效团队打造大片，最后观众看了五毛特效也只能吃哑巴亏，而巨额特效专款却无影无踪；某个人见人骂的女星，颜值不够演技不行，连综艺节目都懒得参加，却频频出现在各大“中外合拍”电影里充当花瓶，长城上打完怪兽，坐上飞机接着打，打来打去把合拍资全打了回来。 &ensp; &ensp;电影影视洗了大钱，传媒影视也不甘示弱：上千万打造的城市宣传片毫无亮点，一秒百万的景点宣传片甚至错把别的景点的短片插进来。更有直接的，到片场回收布景的古董字画，拍卖再折现，一来一去税钱全逃了。 &ensp; &ensp;到最后，院线烂片无数，观众的品味越来越低，能看到自己的爱豆乐呵乐呵就行；影视老板也就更加肆无忌惮，拍的片子好看那是赏你们的，拍的不好我还可以花点小钱请水军；片子赚钱了那是额外收益，赔钱了我还可以占半个月的微博热搜。 &ensp; &ensp;如今税务总局介入，明里查明星税务问题，暗里也多少撼动了影视公司，投资者也对华谊兄弟历来的资本运作充满疑惑。短短十天，华谊兄弟市值蒸发近50亿，一路跌至190亿元以下，相比2015华谊巅峰时期的800亿市值，已缩水近8成。 &ensp; 华谊第一次受到重创是在2005年。2000年大陆第一经纪人王京花带了40多位艺人加入华谊，5年合同到期，这批人全部离开，这其中包括了陈道明、刘嘉玲、梁家辉等当红影星，被媒体成为“掏空了华谊”。之后章子怡、葛优、范冰冰等人的来来去去更是让华谊的人事波动备受争议。 &ensp; 可能是看透了影视产业资金的不确定性，王中军不认为中国电影市场会稳定发展，也不认可电影产品能保证营收上的稳步增长，从2009年华谊上市起王中军就向高层传达了“去电影化”的思路，并于2013年前后彻底实施。王中军的思路是好的，一开始也颇有预见性：2009年，华谊作为国内专业化经纪公司的王牌，坐拥60多位当红明星，包括周迅、黄晓明、李冰冰等。华谊靠着大把的娱乐资源，靠经纪项目混得风生水起，做到了电影业务的龙头。但2013年也是娱乐产业全面走向互联网的开端，自媒体、粉丝与舆论的力量开始显现，当红明星纷纷“出走”华谊自立门户，成立自己的工作室，不再依托经纪公司的资源；新生代的小明星也往往靠自己的力量向受众推广。 &ensp; 王中军越发坚定地认为“去电影化”的策略是正确的，对影视艺人越发不重视，签出一票对赌捆绑协议，让明星艺人主动为其打工；经纪业务收入占比从2009年的20%降至2013年的8%；同时又大力发展其它业务，耗巨资收购公司、建“迪士尼式”的电影城。 &ensp; 然而王中军错就错在操之过急，未等新产业成型便放弃了旧老本。 &ensp; 2014年被称为中国资本市场的“影视年” ，资本大量向影视圈流入，华谊的放手给了对手可乘之机。光线和博纳强势闯入票房市场，与仅仅成立两年的乐视影业共同拿走了2014年一半的国产片票房市场。从此以后华谊电影一蹶不振。2014年一整年的现象级电影、明星大咖话题全都和华谊无关，华谊不但失掉了资源，也失去了一整年的话语权。 &ensp; 之后的2015年、2016年，华谊多部电影诸如《纽约纽约》《奔爱》《灵偶契约》等全部赔钱，只有《老炮》凭借冯小刚精湛的转型演技赢得了大众的口碑夺得9亿票房。这种惨状让华谊对冯小刚产生了依赖，这种依赖持续到了今天，而《长城》彻头彻尾的失败也在证明，这种依赖是有多脆弱。 &ensp; 丢了市场和艺人的华谊一错再错，趾高气昂得和导演较劲。 &ensp; 2008年华谊与周星驰合作《长江七号》，2013年再次合作《西游降魔篇》，成为当年年度最佳国产片，票房12.48亿。华谊本应珍惜这段合作关系，却为眼前利益撕破了脸。 &ensp; 华谊本和周星驰通过邮件约定票房过5亿便给对方分红，按最终票房计算，周星驰可以得到8610万的分红，然而后来协议延期签订，一拖再拖，拖到了西游上映，协议也就没签成。周星驰自然不服，将华谊告上法庭。结果可想而知，口头约定不算数，华谊最终胜诉。利益和口碑，华谊选择了利益，还讽刺性得用法律做掩盖。 &ensp; 2016年《美人鱼》上映，票房34亿，光线传媒赚得盆满钵满，没了华谊什么事。 &ensp; 跟导演较完劲，华谊又和最大的院线较上了劲。 &ensp; 叶宁，当了15年的万达文化产业集团副总裁，万达影业的核心人物，被华谊挖走当了CEO；《我不是潘金莲》上映时，冯小刚甚至公开和王思聪互怼，将矛盾进一步升级。院线龙头可不是好惹的，王健林连夜召开会议，封杀华谊。在《我不是潘金莲》全线40%排片率的情况下，万达只给《潘》10%的排片率，同年出品的《陆垚知马俐 》也同样被封杀。最终，2016年成为华谊电影业务最悲惨的一年，全年票房仅达18.1亿，同比下跌62.5%。 &ensp; 没了市场丢了演员缺了导演失了院线的华谊，影视业务以外的产业也没有任何进展：投资游戏公司最终只是为了套现；投资十几家IP影视城没有一点起色，根本不够回血。资金紧张业务全面缩水的华谊又遇上崔永元的捅刀，扛不住的王氏兄弟终于质押了几乎全部股票。 &ensp; &ensp;其实，想要不被投资者质疑，缓和紧张的气氛，为华谊争取回血的时间，王氏兄弟有很多事情可以做，比如大量购持股票，公开优秀业绩，稳定军心。有意思的是，6月12日华谊发表律师声明，表示将依法起诉“造谣传谣”的各大小自媒体，并将相关微博账号一一列举；作为恶劣事件最后一道防守线，华谊选择将公关放在了封杀公众舆论上，这一精彩的举措与前些日的鸿茅药酒如出一辙，简直不打自招。 &ensp; &ensp;也许崔永元的愤怒，既是华谊朱楼塌的第一块碎砖，也是压死骆驼的最后一根稻草。 &ensp; &ensp;6月15日，王中磊在上海电影节开幕前夜发布了20部新作，试图用内容作品再一次打动人心。在2019年片单中，《手机2》显得格外扎眼。“今年是华谊兄弟成立的24个年头。1994年、那一年，我24岁，是我的本命年。24年后，我迎来了我的48岁。”王中磊如是说。本命年，暗示着华谊一路走来的风风雨雨，也隐喻了华谊如今满身伤痕的惨状。 &ensp; &ensp;8月27日，华谊兄弟即将迎来限售股解禁，解禁的限售股达2.9亿股，占总股本的10.49%；一旦限售股遭到机构抛售，华谊兄弟股价将迎来新低，而王氏兄弟股票质押的平仓风险也将提升。 &ensp; &ensp;话不多言，华谊兄弟：风里雨里，大洋彼岸贾老板等你。]]></content>
      <categories>
        <category>实事分析与心得</category>
      </categories>
      <tags>
        <tag>财经</tag>
        <tag>影视</tag>
        <tag>华谊兄弟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《移动应用UI设计模式(第二版)》读书报告]]></title>
    <url>%2F2018%2F06%2F15%2F%E3%80%8A%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8UI%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AC%AC%E4%BA%8C%E7%89%88-%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[语言/翻译： &ensp; 8 / 10 思想/内核： &ensp; 6 / 10 知识含量： &ensp; 7 / 10 综合评分： &ensp; 7 / 10 &ensp; 一部一经出版便会过时的主观性很强的工具书，很好的将市面各个系统上各类UI设计模式汇总，分析评判，也是UI设计懵懂期各个产品公司模式创新的发展史。语言的精炼和产品图片的多样性是这本书的一大亮点。 &ensp; 虽然绝大多数案例都已过时，作者的很多主观想法被时间证明是错误的，但并不影响其理念的正确性和原则的通用性。可以在开发每一个控件时，重新阅读一遍书中相对应的内容，以便对自己的产品做一个审视与验收。 &ensp; 一个最鲜明的原则就是用户为本，无论是智力，思想，操作能力，视觉能力，都要以用户的体验为中心。用最傻瓜的操作，最直白的图片，最精炼的语言，告诉用户，你该干什么；你为什么要这么干；你这么干了有什么好处；你的需求都在我这里；你想要的操作我都有；我会尽一切所能让你用的舒服；你可以给我一些反馈，让我知道你的不满；你经常用我就会奖赏你；记住这是我对你的好，不是我欠你的。]]></content>
      <categories>
        <category>读书报告</category>
      </categories>
      <tags>
        <tag>UI</tag>
        <tag>App</tag>
        <tag>读书报告</tag>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《沉思录》读书报告]]></title>
    <url>%2F2018%2F06%2F12%2F%E3%80%8A%E6%B2%89%E6%80%9D%E5%BD%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[语言/翻译： &ensp; 7 / 10 思想/内核： &ensp; 8 / 10 知识含量： &ensp; 1 / 10 综合评分： &ensp; 5.33 / 10 &ensp; 一部不讲故事的新约，一部不参杂丝毫暴戾的古兰经，一部不含混的菜根谭，一部自省律己的孔孟论语。 &ensp; 其实该懂的都懂了，该想到的都想到了，过时的也都过时了；只不过想到当基督徒们还在口头传诵大爱，当穆罕默德还有400年才出生，一位皇帝却能在鞍马劳顿的十年里，拼死挽救没落古罗马的同时，开创自己的哲学殿堂，石饮心神的精神食粮，写出一部看似杂乱混散却立线鲜明的世界观大集，同时不停呼唤理智和理性，实在是难能可贵。 &ensp; 只不过，抛开那些不科学的，臆想的，和被时代淘汰了的，原来你个一手遮天征战沙场，睿智成熟斯多葛派的大皇帝，竟也这么怕死啊。嘿，天天用生死来逼自己，你不累吗？]]></content>
      <categories>
        <category>读书报告</category>
      </categories>
      <tags>
        <tag>读书报告</tag>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06/06 - 06/10 五日热点整理]]></title>
    <url>%2F2018%2F06%2F10%2F06-06-06-10-%E4%BA%94%E6%97%A5%E7%83%AD%E7%82%B9%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[G7峰会 最失败的一次G7峰会。 在俄罗斯与伊朗问题，联合贸易，进出口征税问题，气候问题上，美国依旧不与其他各国达成共识，没有任何进展；几国领导言语上冲突严重；全球范围内的贸易战一触即发。 快手1.7亿全资收购A站 快手以1.7亿元全盘收购A站，A站终于复活，结束了持续已久的股权纷争博弈。 A站的用户主要分布于一二线城市青少年群体，快手用户分布在三四五线城市的青年及以上年龄群体；从内容上看A站主打二次元内容，快手主打现实底层生活内容；从形式上看，A站属长视频平台，快手短视频平台。因此快手的收购不仅仅是A站的一根救命稻草，也从用户，内容与形式上全面弥补了快手的短板，极大扩大了生态链。 中兴正式与美签约解禁 10亿美元罚款，4亿美元保证金，换来为期10年的解禁。 两年又白干了。 中兴一事前后不到50天，其中的经贸博弈和核心技术禁锢，却是改革开放以来最经典的一课。 美国Summit成全球最快超算 美国能源部国家实验室公布Summit超算，实现每秒330亿亿次混合精度计算，成为最强大超算，打破了中国超算霸榜5年的局面]]></content>
      <categories>
        <category>五日热点整理</category>
      </categories>
      <tags>
        <tag>五日热点整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构轮子：2-栈之顺序栈的类实现]]></title>
    <url>%2F2018%2F06%2F10%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AE%E5%AD%90%EF%BC%9A2-%E6%A0%88%E4%B9%8B%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E7%B1%BB%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[栈的基类123456789101112131415#include&lt;iostream&gt;using namespace std;template&lt;class T&gt;class Stack&#123; public: Stack()&#123;&#125;; ~Stack()&#123;&#125;; virtual void Push(const T&amp; x)=0; virtual T Pop()=0; virtual T GetTop()=0; virtual bool IsEmpty()const =0; virtual int GetSize()const =0; virtual T GetSum()=0;&#125;; 顺序栈123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include&lt;iostream&gt;#include"Stack"using namespace std;const int increaseSize = 20;const int defaultSize = 50;template &lt;class T&gt;class SeqStack: public Stack&lt;T&gt; &#123; private: T *data; int top; int maxSize; void OverFlowProcess(); public: SeqStack(int sz = defaultSize); ~SeqStack()&#123;delete []data;&#125; void Push(const T&amp; x); T Pop(); T GetTop(); bool IsEmpty()const&#123;return (top==-1)?true:false;&#125; int GetSize()const&#123;return (top+1);&#125; void Clear()&#123; top = -1; &#125; void Output(); T GetSum(); //friend ostream&amp; operator &lt;&lt; (ostream&amp; os, SeqStack&lt;T&gt;&amp; s);&#125;;template &lt;class T&gt;void SeqStack&lt;T&gt;::OverFlowProcess()&#123; maxSize+=increaseSize; T* ptr = new T[maxSize]; if(ptr==NULL)&#123; cout&lt;&lt;"err code:1"&lt;&lt;endl; exit(1); &#125; T *srcptr = data; T *desptr = ptr; int n = top+1; while(n--)&#123; *desptr = *srcptr; desptr++; srcptr++; &#125; delete []data; data = ptr;&#125;template&lt;class T&gt;SeqStack&lt;T&gt;::SeqStack(int sz)&#123; data = new T[sz]; maxSize = defaultSize; top = -1;&#125;template&lt;class T&gt;void SeqStack&lt;T&gt;::Push(const T&amp; x)&#123; if(top+1&gt;=maxSize) OverFlowProcess(); top++; data[top] = x;&#125;template&lt;class T&gt;T SeqStack&lt;T&gt;::Pop()&#123; if(IsEmpty()) cout&lt;&lt;"err code:2"&lt;&lt;endl; else&#123; top--; return data[top+1]; &#125; return 0;&#125;template&lt;class T&gt;T SeqStack&lt;T&gt;::GetTop()&#123; if(IsEmpty()) cout&lt;&lt;"err code:2"&lt;&lt;endl; else&#123; return data[top]; &#125; return 0;&#125;template&lt;class T&gt;void SeqStack&lt;T&gt;::Output()&#123; for(int i=0;i&lt;=top;i++) cout&lt;&lt;data[i]&lt;&lt;' '; cout&lt;&lt;endl;&#125;template&lt;class T&gt;T SeqStack&lt;T&gt;::GetSum()&#123; T sum=0; for(int i=0;i&lt;=top;i++) sum+=data[i]; return sum;&#125;/*template&lt;class T&gt;ostream&amp; operator &lt;&lt; (ostream&amp; os, SeqStack&lt;T&gt;&amp; s)&#123; for(int i=0;i&lt;=s.top;i++) os&lt;&lt;s.data[i]&lt;&lt;' '; os&lt;&lt;endl; return os;&#125;*/ 函数说明12345678910111213141516171819202122232425//构造函数，构造时声明栈容量，默认容量为50 SeqStack(int sz = defaultSize);//析构函数，清空栈内存 ~SeqStack(); //向栈顶堆一个数据 void Push(const T&amp; x);//从栈顶溢出一个数据，并将它返回 T Pop();//返回栈顶的数据 T GetTop();//检查栈是否为空，空则返回true，非空则返回false bool IsEmpty()const;//返回栈中数据个数 int GetSize()const;//将栈清空 void Clear(); //栈溢出操作，每次增加20个空间，可无限扩展 void OverFlowProcess();//从栈底到栈顶输出栈中所有数据 void Output();//计算栈中所有数据的总和 T GetSum(); 报错信息121：调整栈容量出现错误2：栈已空，无法进行操作 总结 注意！为类内函数内元素赋默认值时，要在声明时赋值，并在之后无论类内类外的描述中都不需要赋值。该bug调了近一个小时。。。]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
        <tag>顺序栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构轮子：1.线性表之顺序表的类实现]]></title>
    <url>%2F2018%2F06%2F07%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BD%AE%E5%AD%90%EF%BC%9A1-%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[线性表的基类1234567891011121314151617181920212223#include&lt;iostream&gt;using namespace std; template &lt;class T&gt; class LinearList&#123; public: LinearList()&#123;&#125;; ~LinearList()&#123;&#125;; virtual int Size()const=0; virtual int Length()const=0; virtual int Search(T&amp; x)const=0; virtual T GetData(int i)const=0; virtual bool SetData(int i, T&amp; x)=0; virtual bool Insert(int i, T&amp; x)=0; virtual bool Remove(int i)=0; virtual bool IsEmpty()const=0; virtual bool IsFull()const=0; virtual void Sort()=0; virtual void Input(int size)=0; virtual void Output()=0; virtual T Sum()=0; &#125;; 顺序表123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214#include&lt;iostream&gt;#include&lt;algorithm&gt;#include"LinearList"using namespace std; template &lt;class T&gt; class SeqList:public LinearList&lt;T&gt;&#123; protected: T *data; int maxSize; int last; void ReSize(int newSize); public: SeqList(int); //SeqList(int sz):data(new T[sz]),maxSize(sz),last(-1)&#123;&#125; SeqList(const SeqList&lt;T&gt;&amp; L); ~SeqList()&#123;delete []data;&#125; int Size()const; int Length()const; int Search(T&amp; x)const; T GetData(int i)const; bool SetData(int i, T&amp; x); bool Insert(int i, T&amp; x); bool Remove(int i); bool IsEmpty()const; bool IsFull()const; void Sort(); void Reverse(); void Input(int size); void Output(); T Sum(); SeqList&lt;T&gt;&amp; operator = (SeqList&lt;T&gt;&amp; L); &#125;; template &lt;class T&gt; SeqList&lt;T&gt;::SeqList(int sz)&#123; data = new T[sz]; maxSize = sz; last = -1; &#125; template &lt;class T&gt; SeqList&lt;T&gt;::SeqList(const SeqList&lt;T&gt;&amp; L)&#123; maxSize = L.maxSize; last = L.last; data = new T[maxSize]; if(data==NULL)&#123; cout&lt;&lt;"err code:0"&lt;&lt;endl; exit(1); &#125; T value; for(int i=1;i&lt;=last+1;i++)&#123; value = L.GetData(i); SetData(i,value); &#125; &#125; template &lt;class T&gt; void SeqList&lt;T&gt;::ReSize(int newSize)&#123; if(newSize&lt;=0)&#123; cout&lt;&lt;"err code:1"&lt;&lt;endl; exit(1); &#125; if(newSize != maxSize)&#123; maxSize = newSize; T* ptr = new T[maxSize]; if(ptr==NULL)&#123; cout&lt;&lt;"err code:1"&lt;&lt;endl; exit(1); &#125; T*srcptr = data; T*desptr = ptr; int n = last+1; while(n--) *desptr++ = *srcptr++; delete []data; data = ptr; &#125; &#125; template&lt;class T&gt; int SeqList&lt;T&gt;::Size()const&#123; return maxSize; &#125; template&lt;class T&gt; int SeqList&lt;T&gt;::Length()const&#123; return last+1; &#125; template&lt;class T&gt; int SeqList&lt;T&gt;::Search(T&amp; x)const&#123; for(int i=0;i&lt;=last;i++) if(data[i]==x) return i+1; return -1; &#125; template&lt;class T&gt; T SeqList&lt;T&gt;::GetData(int i)const&#123; if(i&gt;=1&amp;&amp;i&lt;=last+1) return data[i-1]; else cout&lt;&lt;"err code:2"&lt;&lt;endl; &#125; template&lt;class T&gt;bool SeqList&lt;T&gt;::SetData(int i, T&amp; x)&#123; if(i&gt;=1&amp;&amp;i&lt;=last+2) data[i-1]=x; else&#123; cout&lt;&lt;"err code:3"&lt;&lt;endl; return false; &#125; return true;&#125;template&lt;class T&gt;bool SeqList&lt;T&gt;::Insert(int i, T&amp; x)&#123; if(i&lt;=0||i&gt;last+2||IsFull()) return false; for(int j=last+1;j&gt;=i;j--) data[j+1]=data[j]; data[i]=x; last++; return true;&#125;template&lt;class T&gt;bool SeqList&lt;T&gt;::Remove(int i)&#123; if(i&lt;=0||i&gt;last+1) return false; else&#123; for(int j=i;j&lt;=last;j++) data[j-1]=data[j]; last--; &#125; return true;&#125;template&lt;class T&gt;bool SeqList&lt;T&gt;::IsFull()const&#123; if(last&lt;maxSize-1) return false; else return true;&#125;template&lt;class T&gt;bool SeqList&lt;T&gt;::IsEmpty()const&#123; if(last&gt;-1) return false; else return true;&#125;template&lt;class T&gt;void SeqList&lt;T&gt;::Sort()&#123; sort(data,data+last+1);&#125;template&lt;class T&gt;void SeqList&lt;T&gt;::Reverse()&#123; sort(data,data+last+1); T temp; for(int i=0,j=last;i!=j;i++,j--)&#123; temp = data[i]; data[i] = data[j]; data[j] = temp; &#125;&#125;template&lt;class T&gt;void SeqList&lt;T&gt;::Input(int size)&#123; if(size&gt;maxSize-1-last) cout&lt;&lt;"err code:4"&lt;&lt;endl; else&#123; for(int i=last+1;i&lt;=last+size;i++) cin&gt;&gt;data[i]; last+=size; &#125;&#125;template&lt;class T&gt;void SeqList&lt;T&gt;::Output()&#123; for(int i=0;i&lt;=last;i++) cout&lt;&lt;data[i]&lt;&lt;' '; cout&lt;&lt;endl;&#125;template&lt;class T&gt;T SeqList&lt;T&gt;::Sum()&#123; T sum=0; for(int i=0;i&lt;=last;i++) sum+=data[i]; return sum; &#125;template&lt;class T&gt; SeqList&lt;T&gt;&amp; SeqList&lt;T&gt;::operator = (SeqList&lt;T&gt;&amp; L) &#123; maxSize=L.maxSize; last=L.last; data=new T[maxSize]; if(data==NULL)&#123; //cout&lt;&lt;"err code:5"&lt;&lt;endl; exit(1); &#125; T value; for(int i=1;i&lt;=last+1;i++)&#123; value=L.GetData(i); SetData(i,value); &#125; return *this; &#125; 函数说明1234567891011121314151617181920212223242526272829303132333435363738394041//构造函数，构造时声明表容量 SeqList(int);//拷贝构造函数 SeqList(const SeqList&lt;T&gt;&amp; L);//析构函数，清空表内存 ~SeqList()&#123;delete []data;&#125; //检查表的容量，返回int型容量大小 int Size()const;//检查已存储的数据长度，返回int型长度 int Length()const;//查找表中x值所在位置，返回int型表项序号，若无x则返回-1 int Search(T&amp; x)const;//取得第i个表项的值，若未取得则报错 T GetData(int i)const;//将第i个表项的值改为x，修改成功返回true，修改失败返回false并报错 bool SetData(int i, T&amp; x);//在第i个表项位置插入一个x，成功插入返回true，否则返回false bool Insert(int i, T&amp; x);//清除第i个数据，成功返回true，失败返回false bool Remove(int i);//判断表是否为空，空则返回true，不空返回false bool IsEmpty()const;//判断表是否已满，满则返回true，不满返回false bool IsFull()const;//将表以从小到大顺序排序 void Sort();//将表以从大到小顺序排序 void Reverse();//输入size个数据，在表后依次添加 void Input(int size);//输出表中所有数据 void Output();//将表中所有数据加和，并返回总和 T Sum();//保护函数，调整表容量为newSize void ReSize(int newSize); //重载运算符“=”，完成表间拷贝 SeqList&lt;T&gt;&amp; operator = (SeqList&lt;T&gt;&amp; L); 报错信息123451： 调整表容量出现错误2： 取第i项值时出现错误3： 为第i项赋值时出现错误4： 在表后添加数据出现错误//5： 表间拷贝出现错误 总结 C++细节遗忘的太多了，以及一直没有像样的写过工程系代码，很不熟练，半数面向代码编程。 注意！所有基类的虚函数必须严格实函数化才能运行！该bug调试了一个多小时。]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>顺序表</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《指尖世界 移动App界面设计之道》读书报告]]></title>
    <url>%2F2018%2F06%2F06%2F%E3%80%8A%E6%8C%87%E5%B0%96%E4%B8%96%E7%95%8C-%E7%A7%BB%E5%8A%A8App%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E4%B9%8B%E9%81%93%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[语言/翻译： &ensp; 5 / 10 思想/内核： &ensp; 4 / 10 知识含量： &ensp; 4 / 10 综合评分： &ensp; 4.67 / 10 &ensp; 以一个专业UI设计师的角度阐述自己的工作内容，从思维表述到用户体验再到各种职场必备的能力，东拼西凑了一幅理想UI设计人员的速写。语言赘碎，爱讲大道理，知识与思想可以压缩成10页。 艺术设计与工业设计往往不能同时处理，要分别以艺术和产品的角度审视，反复博弈后进行决策，不能同时做视觉设计和交互设计。 设计元素做到规范与合理化，主要包括： 规范的用户调研，权衡红花与绿叶的关系，遵循眼动原则，文字排版样式细节的一致性，颜色避免过分撞色，构图紧凑一致。 确定用户需求并编写文档进行讲解时首先注意故事性，其次才是逻辑性。 流行元素的运用紧跟大厂，是扁平化，像素化还是写实化，随大厂的潮流引领，容错率最大，可行性最高。 任何一件以用户体验为原则的实体优化都可以类推用于app界面上。]]></content>
      <categories>
        <category>读书报告</category>
      </categories>
      <tags>
        <tag>UI</tag>
        <tag>App</tag>
        <tag>读书报告</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06/01-06/05 五日热点整理]]></title>
    <url>%2F2018%2F06%2F05%2F06-01-06-05-%E4%BA%94%E6%97%A5%E7%83%AD%E7%82%B9%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[今日头条战腾讯 &ensp; &ensp; &ensp; 今日头条以9000w赔偿金的起诉回应腾讯1元赔偿起诉。 &ensp; &ensp; &ensp; 头条表面上争夺短视频信息流量，实际尝试从内容跨越到通讯社交，进而发展商业模式，抢夺腾讯地盘；另一方面，今日头条逐渐向阿里靠拢，一改从前不站队不拿巨头投资的风格，可以说，中国互联网之争，最终还是会落回到AT的封锁负和博弈。个人预测头条将在短期内全面封锁腾讯链，尝试推出头条系社交软件与购物渠道，但最终不温不火以失败和解告终。 &ensp; &ensp; &ensp; 同时，以B站为首的前互联网黑马受关注度骤减，个人预测B站以一贯高冷的风格，将在半年内尝试推出新内容新平台，但为时已晚。当无广告的长视频内容成为流量焦点时，B站未能继续创新引领内容潮流，而是不痛不痒得修改界面，推出大会员，继续推广动画业务，捡了用户体验的芝麻，丢了内容革新的西瓜，最终会成为下一个A站。 &ensp; &ensp; &ensp; 另一方面，如果今日头条继续稳步发展，可能会涉足音乐产业。抖音视频的诱人之处便在于用户精心挑选，剪辑的15秒配乐。从乔布斯通过iTunes涉足音乐产业，电台点歌，节目爆款，到今天大陆网民熟用的网易qq音乐所形成的新音乐消费观，音乐产业离不开现象级的热度和付费前的试听；然而音乐渠道十分稀少，30秒的前奏试听又难以表达一些表现形式的歌曲，这就造成了小众音乐火不成，小音乐人活不了的现状。抖音很好的改善了这一现象，从前段时间的小众音乐《心愿便利贴》《离人愁》，小音乐团体 “音阙诗听” “新乐尘符”，到最近红到发紫的《答案》及其翻唱者，有太多的人听完便去音乐平台搜索，不仅激励了音乐人的创作热情，也提高了听众的审美标准。个人预测如果头条继续与腾讯作对，很有可能向网易投出橄榄枝。 美朝会晤&ensp; &ensp; &ensp; 特朗普确定将于12日与金正恩会晤。 《西瓜足迹》小程序爆红 &ensp; &ensp; &ensp; 完全抄袭5个月前运营的小程序《脚步地图》，依靠虚假的“超越%用户”激发炫耀心理爆红，一天上线访问量达到1000万次。 &ensp; &ensp; &ensp; 制作壁垒低，用户留存量低，隐私数据是否被利用，原创者如何维权等，依然是当前爆红小程序的焦点。 微软收购Github &ensp; &ensp; &ensp; 此举或结束了 Github 9年找不到CEO且不盈利的状态，尽管业内普遍不看好，并引发了开发者信任等问题，但也看出微软在向开源拥抱，希望微软能够维持 Github 的理念并真正做到给开发者赋能。 &ensp; &ensp; &ensp; 在宣布收购的同时，Gitlab 项目输入增加了10倍，个人认为只是小浪潮。 苹果WWDC发布会 &ensp; &ensp; &ensp; 没有任何硬件上的更新；ios12系统更新很大，可以说人机交互更流畅了；软件上实用的部分紧跟安卓，不跟安卓的又不够实用，很多安卓P悄悄更新不声张的东西，苹果却拿来当作重点；与Adobe合作开发AR专用格式USDZ，个人对不兼容特殊格式向来不看好。 &ensp; &ensp; &ensp; ​不难看出，苹果的创新能力已经严重下滑了，封闭的生态环境导致开发者们只能单纯等待苹果跟随安卓的步伐。当然如此低效的更新却又要嘲讽下安卓的更新成效，一个负重淌水，一个摸石头过河造桥，难免有些说葡萄酸的味道。]]></content>
      <categories>
        <category>五日热点整理</category>
      </categories>
      <tags>
        <tag>五日热点整理</tag>
      </tags>
  </entry>
</search>
